class Timer

instance variables

currentTime  : nat  := 0;
active       : bool := false;
currentAlarm : nat  := 0;

thread

periodic(100,10,90,0)(IncTime)

operations
IncTime: () ==> ()
IncTime() ==
  if active
  then currentTime := currentTime + Sensor`stepLength;

public Alarm : nat ==> ()
Alarm(wakeup) ==
( currentAlarm := wakeup;
  Start();
  WaitAlarm());

WaitAlarm : () ==> ()
WaitAlarm() == Stop();

sync

  per WaitAlarm => currentTime >= currentAlarm;

operations

public Interruption : () ==> ()
Interruption() ==
  currentTime := currentAlarm;

Start : () ==> ()
Start() ==
( active := true;
  currentTime := 0);

Stop : () ==> ()
Stop() ==
  active := false;

sync

mutex(Start, Interruption, IncTime);
mutex(Start, Stop);

end Timer