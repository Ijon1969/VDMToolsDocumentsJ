\begin{vdm_al}
class World

instance variables

sensor       : Sensor := new Sensor();
detector     : MissileDetector := new MissileDetector();
flareControl : FlareController := new FlareController();
timerRef     : Timer := new Timer();
inputVals    : seq of ([Sensor`MissileType * Sensor`Angle] * nat) := [];

operations

public Run : () ==> (map FlareDispenser`MagId to 
                         seq of (FlareDispenser`FlareType * nat)) *
                    (seq of ([Sensor`MissileType * Sensor`Angle] * nat))
Run() ==
( detector.Init(sensor,flareControl);
  flareControl.Init(detector,timerRef);
  while not (sensor.IsFinished() and detector.IsFinished() and
        flareControl.IsFinished()) do
    ( inputVals := inputVals ^
          [mk_(sensor.ReadThreat(), timerRef.GetTime())];
      if not detector.IsFinished() 
      then detector.Step();
      if not flareControl.IsFinished() 
      then flareControl.Step();
      timerRef.StepTime();
      if not sensor.IsFinished() 
      then sensor.SetThreat();
     );
  return mk_(flareControl.GetResult(), inputVals)
)

end World
\end{vdm_al}

\begin{rtinfo}[World`Run]
{vdm.tc}[World]
\end{rtinfo}
