{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f28\froman\fcharset238\fprq2 Times New Roman CE;}{\f29\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f31\froman\fcharset161\fprq2 Times New Roman Greek;}{\f32\froman\fcharset162\fprq2 Times New Roman Tur;}{\f33\froman\fcharset177\fprq2 Times New Roman (Hebrew);}{\f34\froman\fcharset178\fprq2 Times New Roman (Arabic);}
{\f35\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f36\fswiss\fcharset238\fprq2 Arial CE;}{\f37\fswiss\fcharset204\fprq2 Arial Cyr;}{\f39\fswiss\fcharset161\fprq2 Arial Greek;}{\f40\fswiss\fcharset162\fprq2 Arial Tur;}
{\f41\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f42\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f43\fswiss\fcharset186\fprq2 Arial Baltic;}{\f44\fmodern\fcharset238\fprq1 Courier New CE;}{\f45\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f47\fmodern\fcharset161\fprq1 Courier New Greek;}{\f48\fmodern\fcharset162\fprq1 Courier New Tur;}{\f49\fmodern\fcharset177\fprq1 Courier New (Hebrew);}{\f50\fmodern\fcharset178\fprq1 Courier New (Arabic);}
{\f51\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext0 
heading 1;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext15 VDM;}{\*\cs16 \additive 
\f6\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf6\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_NCOV;}{\s18\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 
\f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon15 \snext18 VDM_TC_TABLE;}}{\info{\title The GroupPhase Class}{\author Peter Gorm Larsen}{\operator Peter Gorm Larsen }{\creatim\yr2000\mo10\dy26\hr10\min13}
{\revtim\yr2001\mo11\dy27\hr11\min40}{\version2}{\edmins114}{\nofpages5}{\nofwords1127}{\nofchars6425}{\*\company SCSK}{\nofcharsws7890}{\vern8247}}
\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3\jcompress\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0
{\*\template C:\\Program Files\\Microsoft Office\\Templates\\VDM.dot}\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang
{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain 
\s1\ql \li0\ri0\sb240\sa60\keepn\widctlpar\faauto\outlinelevel0\adjustright\rin0\lin0\itap0 \b\f1\fs28\lang1033\langfe1033\kerning28\cgrid\langnp1033\langfenp1033 {The GroupPhase Class
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {class GroupPhase
\par 
\par values
\par 
\par secondRoundWinners = [<A>,<B>,<C>,<D>,<E>,<F>,<G>,<H>];
\par secondRoundRunnersUp = [<B>,<A>,<D>,<C>,<F>,<E>,<H>,<G>]
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {types
\par 
\par Team = <Brazil> | <Norway> | <Morocco> | <Scotland> |
\par        <Italy> | <Chile> | <Austria> | <Cameroon> |
\par        <France> | <Denmark> | <SouthAfrica> | <SaudiArabia> | 
\par        <Nigeria> | <Paraguay> | <Spain> | <Bulgaria> |
\par        <Holland> | <Mexico> | <Belgium> | <SouthKorea> |
\par        <Germany> | <Yugoslavia> | <Iran> | <UnitedStates> |
\par        <Rumania> | <England> | <Colombia> | <Tunisia> |
\par        <Argentina> | <Croatia> | <Jamaica> | <Japan>;
\par 
\par GroupName = <A> | <B> | <C> | <D> | <E> | <F> | <G> | <H>;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Score :: team : Team
\par          won : nat
\par          drawn : nat
\par          lost : nat
\par          points : nat
\par inv sc == sc.points = 3 * sc.won + sc.drawn;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {instance variables
\par   gps : map GroupName to set of Score :=
\par         \{ <A> |-> sc_init (\{<Brazil>, <Norway>, 
\par                             <Morocco>, <Scotland>\}),
\par           <B> |-> sc_init (\{<Italy>, <Chile>, <Austria>, <Cameroon>\}),
\par           }{\lang1024\langfe1024\langnp1030 <C> |-> sc_init (\{<France>, <Denmark>, 
\par                             }{<SouthAfrica>,<SaudiArabia>\}),
\par           <D> |-> sc_init (\{ <Nigeria>, <Paraguay>, 
\par                              <Spain>, <Bulgaria>\}),
\par           <E> |-> sc_init (\{ <Holland>, <Mexico>, 
\par                              <Belgium>, <SouthKorea>\}),
\par           <F> |-> sc_init (\{<Germany>, <Yugoslavia>, 
\par                             <Iran>, <UnitedStates>\}),
\par           <G> |-> sc_init (\{<Rumania>, <England>, 
\par                             <Colombia>, <Tunisia>\}),
\par           <H> |-> sc_init (\{<Argentina>, <Croatia>, 
\par                             <Jamaica>, <Japan>\})\};
\par inv forall gp in set rng gps & 
\par       (card gp = 4 and
\par        forall sc in set gp & sc.won + sc.lost + sc.drawn <= 3)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {functions
\par 
\par sc_init : set of Team -> set of Score
\par sc_init (ts) ==
\par   \{ mk_Score (t,0,0,0,0) | t in set ts \};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {clear_winner : set of Score -> bool
\par clear_winner (scs) ==
\par   exists sc in set scs & 
\par     forall sc' in set scs \\ \{sc\} & sc.points > sc'.points;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {winner_by_more_wins : set of Score -> bool
\par winner_by_more_wins (scs) ==
\par   exists sc in set scs &
\par     forall sc' in set scs \\ \{sc\} &
\par       (sc.points > sc'.points) or
\par       (sc.points = sc'.points and sc.won > sc'.won)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {operations
\par 
\par Win : Team * Team ==> ()
\par Win (wt,lt) ==
\par   let gp in set dom gps be st 
\par         \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par   in gps := gps ++ \{ gp |-> 
\par                          \{ if sc.team = wt
\par                            then mu(sc, won |-> sc.won + 1,
\par                                        points |-> sc.points + 3)
\par                            else if sc.team = lt
\par                            then mu(sc, lost |-> sc.lost + 1)
\par                            else sc 
\par                                    | sc in set gps(gp)\}\}
\par pre exists gp in set dom gps &
\par       \{wt,lt\} subset \{sc.team | sc in set gps(gp)\};
\par 
\par Win2 (wt,lt: Team)
\par ext wr gps : map GroupName to set of Score
\par pre exists gp in set dom gps & 
\par         \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par post exists gp in set dom gps &
\par        \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par        and gps = gps~ ++ 
\par                      \{ gp |-> 
\par                        \{if sc.team = wt
\par                         then mu(sc, won |-> sc.won + 1,
\par                                     points |-> sc.points + 3)
\par                         else if sc.team = lt
\par                         then mu(sc, lost |-> sc.lost + 1)
\par                         else sc 
\par                    | sc in set gps(gp)\}\};
\par 
\par GroupWinner (gp:GroupName) t:Team
\par ext rd gps : map GroupName to set of Score
\par pre gp in set dom gps
\par post t in set \{sc.team | sc in set gps(gp)\} and
\par      let sct = iota sc in set gps(gp) & sc.team = t 
\par      in 
\par        forall sc in set gps(gp) &
\par          sc.team <> t => sct.points > sc.points or
\par                          sct.points = sc.points and sct.won > sc.won;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupRunnerUp (gp:GroupName) t:Team
\par ext rd gps : map GroupName to set of Score
\par post let sc' in set gps(gp) be st
\par        true --post_GroupWinner(gp,sc'.team,gps,gps)
\par      in t in set \{sc.team | sc in set gps(gp) \\ \{sc'\}\} and
\par         let sct = iota sc in set gps(gp) \\ \{sc'\} & sc.team = t
\par         in forall sc in set gps(gp) \\ \{sc'\} &
\par          sc.team <> t => sct.points > sc.points or
\par                          sct.points = sc.points and sct.won > sc.won;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- let stmt - lots of examples presumably
\par GroupWinner_expl : GroupName ==> Team
\par GroupWinner_expl (gp) ==
\par   let sc in set gps(gp) be st
\par      forall sc' in set gps(gp) \\ \{sc\} & 
\par         (sc.points > sc'.points) or
\par         (sc.points = sc'.points and sc.won > sc'.won)
\par   in return sc.team;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupRunnerUp_expl : GroupName ==> Team
\par GroupRunnerUp_expl (gp) ==
\par   def t = GroupWinner(gp)
\par   in let sct = iota sc in set gps(gp) & sc.team = t
\par      in 
\par        let sc in set gps(gp) \\ \{sct\} be st
\par          forall sc' in set gps(gp) \\ \{sc,sct\} & 
\par            (sc.points > sc'.points) or
\par            (sc.points = sc'.points and sc.won > sc'.won)
\par        in return sc.team;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- def stmt
\par SecondRound_expl : () ==> seq of (Team * Team)
\par SecondRound_expl () ==
\par   def winners = \{ gp |-> GroupWinner_expl(gp) | gp in set dom gps \};
\par       runners_up = \{ gp |-> GroupRunnerUp_expl(gp) | gp in set dom gps\}
\par   in return ([mk_(winners(secondRoundWinners(i)),
\par                   runners_up(secondRoundRunnersUp(i))) 
\par              | i in set \{1,...,8\}]);
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- assignment to state designator
\par --  c.f. earlier version of Win
\par Win_sd : Team * Team ==> ()
\par Win_sd (wt,lt) ==
\par   let gp in set dom gps be st 
\par       \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par   in gps(gp) := \{ if sc.team = wt
\par                   then mu(sc, won |-> sc.won + 1,
\par                               points |-> sc.points + 3)
\par                   else if sc.team = lt
\par                   then mu(sc, lost |-> sc.lost + 1)
\par                   else sc 
\par                       | sc in set gps(gp)\}
\par pre exists gp in set dom gps & 
\par     \{wt,lt\} subset \{sc.team | sc in set gps(gp)\};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {
\par -- conditional statements
\par 
\par GroupWinner_if : GroupName ==> Team
\par GroupWinner_if (gp) ==
\par   if clear_winner(gps(gp))
\par   then return ((iota sc in set gps(gp) &
\par                  forall sc' in set gps(gp) \\ \{sc\} &
\par                    sc.points > sc'.points).team)
\par   else if winner_by_more_wins(gps(gp))
\par        then return ((iota sc in set gps(gp) &
\par                  forall sc' in set gps(gp) \\ \{sc\} &
\par                    (sc.points > sc'.points) or
\par                    (sc.points = sc'.points and sc.won > sc'.won)).team)
\par   else RandomElement ( \{sc.team | sc in set gps(gp) &
\par                          forall sc' in set gps(gp) &
\par                           sc'.points <= sc.points\} )
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {RandomElement : set of Team ==> Team
\par RandomElement (ts) ==
\par   (dcl t:Team := let t' in set ts in t';
\par    return (t));
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupWinner_cases : GroupName ==> Team
\par GroupWinner_cases (gp) ==
\par   cases true:
\par     (clear_winner(gps(gp))) -> 
\par          return ((iota sc in set gps(gp) &
\par                    forall sc' in set gps(gp) \\ \{sc\} &
\par                     sc.points > sc'.points).team),
\par 
\par     (winner_by_more_wins(gps(gp))) ->
\par          return ((iota sc in set gps(gp) &
\par                    forall sc' in set gps(gp) \\ \{sc\} &
\par                      (sc.points > sc'.points) or
\par                      (sc.points = sc'.points and 
\par                       sc.won > sc'.won)).team),
\par 
\par     others -> RandomElement ( \{sc.team | sc in set gps(gp) &
\par                                 forall sc' in set gps(gp) &
\par                                  sc'.points <= sc.points\} )
\par   end
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- for loops
\par GroupWinners: () ==> set of Team
\par GroupWinners () ==
\par   (dcl winners : set of Team := \{\};
\par    for all gp in set dom gps do
\par      (dcl winner: Team := GroupWinner(gp);
\par       winners := winners union \{winner\}
\par      );
\par    return winners
\par    );
\par 
\par end GroupPhase
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par }}
