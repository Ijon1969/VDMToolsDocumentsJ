{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}
{\f86\froman\fcharset238\fprq2 Times New Roman CE;}{\f87\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f89\froman\fcharset161\fprq2 Times New Roman Greek;}{\f90\froman\fcharset162\fprq2 Times New Roman Tur;}
{\f91\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f92\fswiss\fcharset238\fprq2 Arial CE;}{\f93\fswiss\fcharset204\fprq2 Arial Cyr;}{\f95\fswiss\fcharset161\fprq2 Arial Greek;}{\f96\fswiss\fcharset162\fprq2 Arial Tur;}
{\f97\fswiss\fcharset186\fprq2 Arial Baltic;}{\f98\fmodern\fcharset238\fprq1 Courier New CE;}{\f99\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f101\fmodern\fcharset161\fprq1 Courier New Greek;}{\f102\fmodern\fcharset162\fprq1 Courier New Tur;}
{\f103\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;
\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 
Normal;}{\s1\fi-360\li360\sb240\sa60\keepn\nowidctlpar\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls1\pnrnot0\pndec }\ls1\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{
\s2\sb240\sa60\keepn\nowidctlpar\widctlpar\adjustright \b\i\f1\cgrid \sbasedon0 \snext0 heading 2;}{\*\cs10 \additive Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid \snext15 VDM;}{\*\cs16 \additive 
\f6\chshdng1000\chcfpat0\chcbpat0 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf16\chshdng1000\chcfpat0\chcbpat0 \sbasedon10 VDM_NCOV;}{\s18\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid \sbasedon15 \snext18 VDM_TC_TABLE;}{
\s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid \sbasedon0 \snext19 Body Text;}}{\*\listtable{\list\listtemplateid-601179278\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext
\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1800\jclisttab\tx1800 }{\listname ;}\listid-132}{\list\listtemplateid1367404992\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}
\fi-360\li1440\jclisttab\tx1440 }{\listname ;}\listid-131}{\list\listtemplateid-2136464886\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li1080
\jclisttab\tx1080 }{\listname ;}\listid-130}{\list\listtemplateid1001315474\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li720\jclisttab\tx720 }{\listname 
;}\listid-129}{\list\listtemplateid-1451752902\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listname ;}\listid-128}
{\list\listtemplateid-1244003290\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listname ;}\listid-127}
{\list\listtemplateid2145786942\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listname ;}\listid-126}
{\list\listtemplateid2058662556\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li720\jclisttab\tx720 }{\listname ;}\listid-125}
{\list\listtemplateid-1253267104\listsimple{\listlevel\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-120}{\list\listtemplateid1941573774
\listsimple{\listlevel\levelnfc23\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-119}{\list\listtemplateid125838754\listsimple{\listlevel
\levelnfc0\leveljc0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\s1\fi-360\li360\jclisttab\tx360 }{\listname ;}\listid515652842}}{\*\listoverridetable{\listoverride\listid515652842\listoverridecount0\ls1}
{\listoverride\listid-119\listoverridecount0\ls2}{\listoverride\listid-125\listoverridecount0\ls3}{\listoverride\listid-126\listoverridecount0\ls4}{\listoverride\listid-127\listoverridecount0\ls5}{\listoverride\listid-128\listoverridecount0\ls6}
{\listoverride\listid-120\listoverridecount0\ls7}{\listoverride\listid-129\listoverridecount0\ls8}{\listoverride\listid-130\listoverridecount0\ls9}{\listoverride\listid-131\listoverridecount0\ls10}{\listoverride\listid-132\listoverridecount0\ls11}}{\info
{\title Default Rose-VDM++ Link forward engineering file}{\author VDM Tools}{\operator peter}{\creatim\yr1998\mo10\dy16\hr14\min8}{\revtim\yr2000\mo6\dy2\hr12\min3}{\printim\yr1999\mo2\dy12\hr17\min27}{\version55}{\edmins255}{\nofpages5}
{\nofwords1079}{\nofchars6151}{\*\company SCSK}{\nofcharsws7553}{\vern71}}\widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl 
{\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}\pard\plain \s2\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel1\adjustright \b\i\f1\cgrid {\lang2057 The }{\i0\lang2057 KLV}{\lang2057  Class
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i KLV}{ class is the main class of the KLV system. It controls a Cab Display, an On Board Computer, and an Emergency Break. Furthermore, it contains operations corresponding to the kinds of events that can trigger the KLV system
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {--
\par -- THIS FILE IS AUTOMATICALLY GENERATED!!
\par --
\par -- Generated at Thu 04-Feb-99 by the Rose VDM++ Link
\par --
\par class KLV
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i onboardcomp}{, }{\i cabdisplay}{, and }{\i emergencybreak}{ instance variables are references to objects representing the on-board computer, the cab display, and the emergency break.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {instance variables
\par   onboardcomp : OnBoardComp := new OnBoardComp();
\par   cabdisplay : CabDisplay := new CabDisplay();
\par   emergencybreak : EmergencyBreak := new EmergencyBreak();
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i announcements}{ and }{\i speedrestrictions}{ instance variables model the TIV_D beacons (speed restriction announcements) met and the current TIV_E beacons (speed restrictions) active. Notice the limit of at most 5 active speed restrictions.

\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {  announcements : seq of TIV_D := [];
\par 
\par   speedrestrictions : seq of TIV_E := [];
\par   inv len speedrestrictions <= 5;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i firstspeedrestriction}{ instance variable ensures that the first TIV_E beacon is not removed when the train tail meets it.}{\i 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {  firstspeedrestriction : bool := true;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i maxspeed}{ value represents the general maximal speed of the train.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {values
\par   maxspeed : real = 140;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The operation }{\i headMeetsBeacon}{ represents the event that the train head meets a beacon. Depending on what kind of beacon is met the actions are different. That the train head meets an FLTV beacon does not trigger any event.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {operations
\par 
\par public
\par headMeetsBeacon : Beacon ==> ()
\par headMeetsBeacon (beacon) ==
\par   cases true:
\par     (isofclass(TIV_D, beacon)) -> announceSpeedRestriction(beacon),
\par     (isofclass(TIV_E, beacon)) -> addSpeedRestriction(beacon),
\par     (isofclass(TIV_A, beacon)) -> deleteAnnouncements(),
\par     (isofclass(FLTV, beacon))  -> skip
\par   end;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The operation }{\i tailMeetsBeacon}{ represents the event that the end of the train meets a beacon. Depending on what kind of beacon is met the actions are different. That the end of the trai
n meets either a TIV_D or a TIV_A beacon does not trigger any event. 
\par If a TIV_E beacon is the first of a sequence of speed restrictions then it should not be removed when the train tail meets it. Instead the }{\i firstspeedrestriction}{ variable is set to false.
 When an FLTV beacon is met it marks the end of a sequence of speed restrictions and }{\i firstspeedrestriction}{ variable is set back to true.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par tailMeetsBeacon : Beacon ==> ()
\par tailMeetsBeacon (beacon) ==
\par   cases true:
\par     (isofclass(TIV_D, beacon)) -> skip,
\par     (isofclass(TIV_E, beacon)) -> if not firstspeedrestriction
\par                                   then removeSpeedRestriction()
\par                                   else firstspeedrestriction := false,
\par     (isofclass(TIV_A, beacon)) -> skip,
\par     (isofclass(FLTV, beacon))  -> ( firstspeedrestriction := true;
\par                                     removeSpeedRestriction () )
\par   end;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i announceSpeedRestriction}{ operation performs the action of the train head meeting a TIV_D beacon. This action is that the announcement of a speed restriction is registered. 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par announceSpeedRestriction : TIV_D ==> ()
\par announceSpeedRestriction (tiv_d) ==
\par ( announcements := announcements ^ [tiv_d];
\par   deletePossibleGroundFault () );
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i addSpeedRestriction}{ operation performs the action that the train head meets a TIV_E beacon. This action is that an announcement is registered as an actual speed restriction.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par addSpeedRestriction : TIV_E ==> ()
\par addSpeedRestriction (tiv_e) ==
\par   if len speedrestrictions < 5
\par   then ( let speed = (hd announcements).getTargetSpeed() in
\par          tiv_e.setSpeedRestriction (speed);
\par          speedrestrictions := speedrestrictions ^ [tiv_e];
\par          announcements := tl announcements;
\par          deletePossibleGroundFault() )
\par   else raiseGroundFault()
\par pre announcements <> [];
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i deleteAnnuoncements}{ operation performs the action that the train head meets a TIV_A beacon. This action is that all the speed restriction announcements are deleted.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par deleteAnnouncements : () ==> ()
\par deleteAnnouncements () ==
\par ( announcements := [];
\par   deletePossibleGroundFault() )
\par pre announcements <> [];
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i removeSpeedRestriction}{ operation performs the action that the end of the train meets either a TIV_E or an FLTV beacon. This action is that a speed restriction is cancelled.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par removeSpeedRestriction : () ==> ()
\par removeSpeedRestriction () ==
\par ( speedrestrictions := tl speedrestrictions;
\par   deletePossibleGroundFault() )
\par pre speedrestrictions <> [];
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i raiseGroundFault}{ operation raises a ground fault in the CabDisplay.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par raiseGroundFault : () ==> ()
\par raiseGroundFault () ==
\par   cabdisplay.setGroundFault();
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i deletePossibleGroundFault}{ operation is invoked when a beacon is met. If the ground fault lamp is switched on it must be switched off when the next beacon is met. The operation switches the ground fault lamp off if it is switched on.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par deletePossibleGroundFault: () ==> ()
\par deletePossibleGroundFault () ==
\par   let mk_(-,-,gf) = cabdisplay.getDisplay() in
\par   if gf 
\par   then cabdisplay.unsetGroundFault();
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i noBeaconMet}{ operation performs the action that a TIV_E beacon has not been met corresponding to a TIV_D announcement.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par noBeaconMet : () ==> ()
\par noBeaconMet () ==
\par ( announcements := tl announcements;
\par   raiseGroundFault() )
\par pre announcements <> [];
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i checkSpeed}{ operation checks whether a speed (the speed of the train) is below the maximal speed, within the alarm speed limit, or above the emergency break speed. The On Board Computer performs that actual calculation. The result is 
switching on and off lamps in the Cab Display, and performing emergency break.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par checkSpeed : real ==> ()
\par checkSpeed (speed) ==
\par   let speedalarm = onboardcomp.checkSpeed (speed, getMaxSpeed()) in
\par   cases speedalarm:
\par     <SpeedOk> -> if not emergencybreak.getEmergencyBreak()
\par }\pard \s15\fi720\nowidctlpar\widctlpar\adjustright \shading1000 {           then cabdisplay.unsetAlarm(),
\par }\pard \s15\nowidctlpar\widctlpar\adjustright \shading1000 {    <AlarmSpeed> -> if not emergencybreak.getEmergencyBreak()
\par                     then cabdisplay.setAlarm(),
\par     <EmergencyBreakSpeed> -> ( cabdisplay.setEmergencyBreak();
\par                                emergencybreak.setEmergencyBreak() )
\par   end;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The }{\i getMaxSpeed}{ operation computes what the actual maximal speed is. If there are speed restrictions the maximal speed will be the minimal speed of the speed restrictions. Otherwise it will be the maximal speed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par getMaxSpeed : () ==> real
\par getMaxSpeed () ==
\par   if speedrestrictions <> []
\par   then let speeds = \{ tiv_e.getSpeedRestriction()
\par                     | tiv_e in set elems speedrestrictions \} in
\par        let minspeed in set speeds be st forall sp in set speeds &
\par            minspeed <= sp in
\par        return minspeed
\par   else return maxspeed;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par releaseEmergencyBreak : real ==> ()
\par releaseEmergencyBreak (sp) ==
\par if sp = 0
\par then ( cabdisplay.unsetEmergencyBreak ();
\par        emergencybreak.unsetEmergencyBreak () )
\par pre let mk_(-,eb,-) = cabdisplay.getDisplay() in eb and
\par     emergencybreak.getEmergencyBreak();
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The following four operations returns state information of a KLV object.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {public
\par getCabDisplay : () ==> CabDisplay
\par getCabDisplay () ==
\par   return cabdisplay;
\par 
\par public
\par getEmergencyBreak : () ==> EmergencyBreak
\par getEmergencyBreak () ==
\par   return emergencybreak;
\par 
\par public
\par getAnnouncements: () ==> seq of TIV_D
\par getAnnouncements () ==
\par   return announcements;
\par 
\par public
\par getSpeedRestrictions: () ==> seq of TIV_E
\par getSpeedRestrictions () ==
\par   return speedrestrictions;
\par 
\par end KLV
\par }\pard\plain \ri-720\nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s18\nowidctlpar\widctlpar\adjustright \shading1000 \f2\fs20\lang1024\cgrid {
\par }}
