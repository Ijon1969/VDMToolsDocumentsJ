{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f3\froman\fcharset2\fprq2{\*\panose 05050102010706020507}Symbol;}{\f4\froman\fcharset0\fprq2{\*\panose 00000000000000000000}Times;}
{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f28\froman\fcharset0\fprq2{\*\panose 00000000000000000000}CG Times{\*\falt Times New Roman};}{\f75\froman\fcharset238\fprq2 Times New Roman CE;}
{\f76\froman\fcharset204\fprq2 Times New Roman Cyr;}{\f78\froman\fcharset161\fprq2 Times New Roman Greek;}{\f79\froman\fcharset162\fprq2 Times New Roman Tur;}{\f80\froman\fcharset177\fprq2 Times New Roman (Hebrew);}
{\f81\froman\fcharset178\fprq2 Times New Roman (Arabic);}{\f82\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f83\fswiss\fcharset238\fprq2 Arial CE;}{\f84\fswiss\fcharset204\fprq2 Arial Cyr;}{\f86\fswiss\fcharset161\fprq2 Arial Greek;}
{\f87\fswiss\fcharset162\fprq2 Arial Tur;}{\f88\fswiss\fcharset177\fprq2 Arial (Hebrew);}{\f89\fswiss\fcharset178\fprq2 Arial (Arabic);}{\f90\fswiss\fcharset186\fprq2 Arial Baltic;}{\f91\fmodern\fcharset238\fprq1 Courier New CE;}
{\f92\fmodern\fcharset204\fprq1 Courier New Cyr;}{\f94\fmodern\fcharset161\fprq1 Courier New Greek;}{\f95\fmodern\fcharset162\fprq1 Courier New Tur;}{\f96\fmodern\fcharset177\fprq1 Courier New (Hebrew);}
{\f97\fmodern\fcharset178\fprq1 Courier New (Arabic);}{\f98\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;\red255\green0\blue255;\red255\green0\blue0;
\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;\red192\green192\blue192;}{\stylesheet{
\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \snext0 Normal;}{\s1\ql \fi-547\li547\ri0\sb240\sa120\keep\keepn\widctlpar\faauto\ls11\outlinelevel0\adjustright\rin0\lin547\itap0 
\b\fs36\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 1;}{\s2\ql \li0\ri0\sb160\sa120\keep\keepn\widctlpar\faauto\ls11\ilvl1\outlinelevel1\adjustright\rin0\lin0\itap0 
\b\fs28\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 2;}{\s3\ql \li0\ri0\sb120\sa80\keep\keepn\widctlpar\faauto\ls11\ilvl2\outlinelevel2\adjustright\rin0\lin0\itap0 
\b\fs24\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 3;}{\s4\ql \li0\ri0\sb120\sa80\keep\keepn\widctlpar\faauto\ls11\ilvl3\outlinelevel3\adjustright\rin0\lin0\itap0 
\b\i\fs24\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 4;}{\s5\qj \li0\ri0\sb120\sa80\keep\keepn\widctlpar\faauto\ls11\ilvl4\outlinelevel4\adjustright\rin0\lin0\itap0 
\b\f1\fs20\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 5;}{\s6\qj \li0\ri0\sb120\sa80\keep\keepn\widctlpar\faauto\ls11\ilvl5\outlinelevel5\adjustright\rin0\lin0\itap0 
\b\i\f1\fs20\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 6;}{\s7\qj \li0\ri0\sb80\sa60\keep\keepn\widctlpar\faauto\ls11\ilvl6\outlinelevel6\adjustright\rin0\lin0\itap0 
\b\fs20\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 7;}{\s8\qj \li0\ri0\sb80\sa60\keep\keepn\widctlpar\faauto\ls11\ilvl7\outlinelevel7\adjustright\rin0\lin0\itap0 
\i\fs20\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 8;}{\s9\qj \li0\ri0\sb80\sa60\keep\keepn\widctlpar\faauto\ls11\ilvl8\outlinelevel8\adjustright\rin0\lin0\itap0 
\b\i\fs20\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 heading 9;}{\*\cs10 \additive Default Paragraph Font;}{\s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 
\f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \snext15 VDM;}{\*\cs16 \additive \f6\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf6\chshdng2000\chcfpat0\chcbpat0 \sbasedon10 VDM_NCOV;}{
\s18\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 \sbasedon15 \snext18 VDM_TC_TABLE;}{\s19\qj \li0\ri0\sa160\widctlpar\faauto\adjustright\rin0\lin0\itap0 
\fs22\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext19 Body Text;}{\s20\ql \li0\ri0\sb120\sa80\keep\keepn\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2047\pnrnot0\pndec\pnf4 }\faauto\ls2047\adjustright\rin0\lin0\itap0 
\b\i\fs24\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon4 \snext19 Heading 4*;}{\s21\ql \li0\ri0\sb160\sa120\keep\keepn\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2047\pnrnot0\pndec\pnf4 }\faauto\ls2047\adjustright\rin0\lin0\itap0 
\b\fs28\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon2 \snext19 Heading 2*;}{\s22\ql \li0\ri0\sb120\sa80\keep\keepn\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2047\pnrnot0\pndec\pnf4 }\faauto\ls2047\adjustright\rin0\lin0\itap0 
\b\fs24\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon3 \snext19 Heading 3*;}{\s23\ql \fi-547\li547\ri0\sb240\sa120\keep\keepn\widctlpar{\*\pn \pnlvlbody\ilvl0\ls2047\pnrnot0\pndec\pnf4 }\faauto\ls2047\adjustright\rin0\lin547\itap0 
\b\fs36\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 \sbasedon1 \snext19 Heading 1*;}{\s24\ql \fi-360\li360\ri0\sa120\widctlpar\jclisttab\tx360{\*\pn \pnlvlbody\ilvl0\ls13\pnrnot0\pndec }\faauto\ls13\adjustright\rin0\lin360\itap0 
\shading1000 \f2\fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 \sbasedon0 \snext24 \sautoupd Version history;}{\s25\qj \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading4500\cbpat8 
\f2\fs20\lang2057\langfe1033\cgrid\langnp2057\langfenp1033 \sbasedon0 \snext25 Plain Text;}}{\*\listtable{\list\listtemplateid-1895105086\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1800\jclisttab\tx1800 }{\listname ;}\listid-132}{\list\listtemplateid-1842684632\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0
\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1440\jclisttab\tx1440 }{\listname ;}\listid-131}{\list\listtemplateid647943194\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li1080\jclisttab\tx1080 }{\listname ;}\listid-130
}{\list\listtemplateid-852623334\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li720
\jclisttab\tx720 }{\listname ;}\listid-129}{\list\listtemplateid1571165486\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1800\jclisttab\tx1800 }{\listname ;}\listid-128}{\list\listtemplateid851762208\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0
\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1440\jclisttab\tx1440 }{\listname ;}\listid-127}{\list\listtemplateid-397893998\listsimple{\listlevel\levelnfc23\levelnfcn23
\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li1080\jclisttab\tx1080 }{\listname ;}\listid-126}
{\list\listtemplateid1310072578\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 
\fi-360\li720\jclisttab\tx720 }{\listname ;}\listid-125}{\list\listtemplateid1670145304\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr
\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-120}{\list\listtemplateid-1467873766\listsimple{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0
{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-360\li360\jclisttab\tx360 }{\listname ;}\listid-119}{\list\listtemplateid-1{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0
\levelstartat1\levelold\levelspace284\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\b\i0\f28\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \s1}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold
\levelspace284\levelindent0{\leveltext\'03\'00.\'01;}{\levelnumbers\'01\'03;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s2}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace284\levelindent0
{\leveltext\'05\'00.\'01.\'02;}{\levelnumbers\'01\'03\'05;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s3}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace284\levelindent0{\leveltext
\'07\'00.\'01.\'02.\'03;}{\levelnumbers\'01\'03\'05\'07;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s4}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent0{\leveltext
\'09\'00.\'01.\'02.\'03.\'04;}{\levelnumbers\'01\'03\'05\'07\'09;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s5}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent0{\leveltext
\'0b\'00.\'01.\'02.\'03.\'04.\'05;}{\levelnumbers\'01\'03\'05\'07\'09\'0b;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s6}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent0{\leveltext
\'0d\'00.\'01.\'02.\'03.\'04.\'05.\'06;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s7}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent0
{\leveltext\'10\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s8}{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold
\levelspace0\levelindent0{\leveltext\'11\'00.\'01.\'02.\'03.\'04.\'05.\'06.\'07.\'08;}{\levelnumbers\'01\'03\'05\'07\'09\'0b\'0d\'0f\'11;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \s9}{\listname ;}\listid-5}{\list\listtemplateid-1\listsimple
{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat0\levelspace0\levelindent0{\leveltext\'01*;}{\levelnumbers;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 }{\listname ;}\listid-2}{\list\listtemplateid-397897272
\listsimple{\listlevel\levelnfc0\levelnfcn0\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelspace0\levelindent0{\leveltext\'02\'00.;}{\levelnumbers\'01;}\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1 \fi-360\li360\jclisttab\tx360 }{\listname 
;}\listid1470124555}}{\*\listoverridetable{\listoverride\listid-119\listoverridecount0\ls1}{\listoverride\listid-120\listoverridecount0\ls2}{\listoverride\listid-125\listoverridecount0\ls3}{\listoverride\listid-126\listoverridecount0\ls4}
{\listoverride\listid-127\listoverridecount0\ls5}{\listoverride\listid-128\listoverridecount0\ls6}{\listoverride\listid-129\listoverridecount0\ls7}{\listoverride\listid-130\listoverridecount0\ls8}{\listoverride\listid-131\listoverridecount0\ls9}
{\listoverride\listid-132\listoverridecount0\ls10}{\listoverride\listid-5\listoverridecount0\ls11}{\listoverride\listid-2\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1
\levelold\levelspace0\levelindent283{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs28\chbrdr\brdrnone\brdrcf1 \chshdng0\chcfpat1\chcbpat1\fbias0 \fi-283\li733 }}\ls12}{\listoverride\listid1470124555\listoverridecount0\ls13}{\listoverride\listid-2
\listoverridecount1{\lfolevel\listoverrideformat{\listlevel\levelnfc23\levelnfcn23\leveljc0\leveljcn0\levelfollow0\levelstartat1\levelold\levelspace0\levelindent283{\leveltext\'01\u-3913 ?;}{\levelnumbers;}\f3\fs28\chbrdr\brdrnone\brdrcf1 
\chshdng0\chcfpat1\chcbpat1\fbias0 \fi-283\li733 }}\ls14}}{\info{\title 1}{\author Peter Gorm Larsen}{\operator Peter Gorm Larsen }{\creatim\yr2000\mo10\dy26\hr10\min37}{\revtim\yr2001\mo11\dy27\hr12\min16}{\version2}{\edmins15}{\nofpages9}{\nofwords2247}
{\nofchars12810}{\*\company SCSK}{\nofcharsws15731}{\vern8247}}\widowctrl\ftnbj\aenddoc\noxlattoyen\expshrtn\noultrlspc\dntblnsbdb\nospaceforul\hyphcaps0\formshade\horzdoc\dghspace120\dgvspace120\dghorigin1701\dgvorigin1984\dghshow0\dgvshow3
\jcompress\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot\nolnhtadjtbl \fet0{\*\template C:\\Program Files\\Microsoft Office\\Templates\\VDM.dot}\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1
\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5
\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\listtext\pard\plain\s1 \b\f28\fs36\lang2057\langfe1033\kerning28\langnp2057 \hich\af28\dbch\af0\loch\f28 1.\tab}\pard\plain 
\s1\ql \fi-547\li547\ri0\sb240\sa120\keep\keepn\widctlpar\faauto\ls11\outlinelevel0\adjustright\rin0\lin547\itap0 \b\fs36\lang2057\langfe1033\kerning28\cgrid\langnp2057\langfenp1033 {The Worldcup examples
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {types
\par 
\par T = <France> | <Denmark> | <SouthAfrica> | <SaudiArabia>;
\par 
\par Team = <Brazil> | <Norway> | <Morocco> | <Scotland> |
\par        <Italy> | <Chile> | <Austria> | <Cameroon> |
\par        <France> | <Denmark> | <SouthAfrica> | <SaudiArabia> | 
\par        <Nigeria> | <Paraguay> | <Spain> | <Bulgaria> |
\par        <Holland> | <Mexico> | <Belgium> | <SouthKorea> |
\par        <Germany> | <Yugoslavia> | <Iran> | <UnitedStates> |
\par        <Rumania> | <England> | <Colombia> | <Tunisia> |
\par        <Argentina> | <Croatia> | <Jamaica> | <Japan>;
\par 
\par GroupName = <A> | <B> | <C> | <D> | <E> | <F> | <G> | <H>;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {       
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Score :: team : Team
\par          won : nat
\par          drawn : nat
\par          lost : nat
\par          points : nat
\par inv sc == sc.points = 3 * sc.won + sc.drawn;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {
\par SeqGroup :: seq of Score;
\par SetGroup :: set of Score;
\par MapGroup :: map Team to (nat * nat * nat * nat);
\par Group = SeqGroup | SetGroup | MapGroup
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {values
\par 
\par --v1 = <France> = <Denmark>;
\par --v2 = <SaudiArabia> <> <SouthAfrica>;
\par 
\par GroupA = [ mk_Score(<Brazil>,2,0,1,6), 
\par            mk_Score(<Norway>,1,2,0,5),
\par            mk_Score(<Morocco>,1,1,1,4),
\par            mk_Score(<Scotland>,0,1,2,1) ];
\par 
\par mk_(Awinner,-) = promoted(GroupA);
\par a = <France>;
\par p1 = cases GroupA(1).team:
\par        <Brazil> -> "Brazil are winners",
\par        (a)      -> "France are winners",
\par        others   -> "Neither France nor Brazil are winners"
\par      end;
\par p2 = let \{sc1, sc2, sc3, sc4\} = elems GroupA
\par      in sc1.points + sc2.points + sc3.points + sc4.points;
\par v3 = a <> <France>;
\par s1 = \{ <France>, <Denmark>, <SouthAfrica>, <SaudiArabia> \};
\par l3 = [<England>, <Rumania>, <Colombia>, <Tunisia>];
\par m1 = \{ <France> |-> 6, <Denmark> |-> 4, <SouthAfrica> |-> 3,
\par        <SaudiArabia> |-> 1\};
\par Europe = \{ <France>, <England>, <Denmark>, <Spain> \};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {sc1 = mk_Score (<France>, 3, 0, 0, 9);
\par sc2 = mk_Score (<Denmark>, 1, 1, 1, 4);
\par sc3 = mk_Score (<SouthAfrica>, 0, 2, 1, 2);
\par sc4 = mk_Score (<SaudiArabia>, 0, 1, 2, 1);
\par 
\par 
\par v4 = iota x in set \{sc1,sc2,sc3,sc4\} & x.team = <France>;
\par 
\par GroupC = \{sc1,sc2,sc3,sc4\};
\par 
\par v5 = \{sc.team | sc in set GroupC & sc.points > 2\};
\par 
\par v6 = \{sc.team | sc in set GroupC & sc.lost > sc.won\};
\par 
\par 
\par v7 = [GroupA(i).team | i in set inds GroupA & GroupA(i).won <> 0];
\par 
\par 
\par v8 = [GroupA(i) | i in set inds GroupA & GroupA(i).won = 0];
\par 
\par v9 = GroupA(1,...,2);
\par 
\par v10 = [GroupA(i) | i in set inds GroupA & GroupA(i).points = 9];
\par 
\par GroupG = \{ <Romania> |-> mk_(2,1,0), <England> |-> mk_(2,0,1),
\par            <Colombia> |-> mk_(1,0,2), <Tunisia> |-> mk_(0,1,2) \};
\par 
\par v11 = \{ t |-> let mk_(w,d,-) = GroupG(t)
\par               in w * 3 + d | t in set dom GroupG\};
\par 
\par --v12 = \{ t |-> w * 3 + d | t in set dom GroupG, w,d,l:nat & 
\par --                             mk_(w,d,l) = GroupG(t) and w > l\};
\par 
\par v13 = GroupA(1);
\par v14 = GroupG(<Romania>);
\par 
\par -- not sure whether this is needed, hence commented out for now
\par --gpIndex: bimap GroupName to nat = 
\par --  \{ <A> |-> 1, <B> |-> 2, <C> |-> 3, <D> |-> 4, 
\par --    <E> |-> 5, <F> |-> 6, <G> |-> 7, <H> |-> 8 \};
\par 
\par secondRoundWinners = [<A>,<B>,<C>,<D>,<E>,<F>,<G>,<H>];
\par secondRoundRunnersUp = [<B>,<A>,<D>,<C>,<F>,<E>,<H>,<G>];
\par myGps = \{ <A> |-> sc_init (\{<Brazil>, <Norway>, <Morocco>, <Scotland>\}),
\par           <B> |-> sc_init (\{<Italy>, <Chile>, <Austria>, <Cameroon>\}),
\par           <C> |-> sc_init (\{<France>, <Denmark>, <SouthAfrica>,<SaudiArabia>\}),
\par           <D> |-> sc_init (\{ <Nigeria>, <Paraguay>, <Spain>, <Bulgaria>\}),
\par           <E> |-> sc_init (\{ <Holland>, <Mexico>, <Belgium>, <SouthKorea>\}),
\par           <F> |-> sc_init (\{<Germany>, <Yugoslavia>, <Iran>, <UnitedStates>\}),
\par           <G> |-> sc_init (\{<Rumania>, <England>, <Colombia>, <Tunisia>\}),
\par           <H> |-> sc_init (\{<Argentina>, <Croatia>, <Jamaica>, <Japan>\})\};
\par 
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {state GroupPhase of
\par   gps : map GroupName to set of Score
\par inv mk_GroupPhase(gps) ==
\par   forall gp in set rng gps & 
\par     (card gp = 4 and
\par      forall sc in set gp & sc.won + sc.lost + sc.drawn <= 3)
\par init gp ==
\par   gp = mk_GroupPhase (\{ <A> |-> sc_init (\{<Brazil>, <Norway>, <Morocco>, <Scotland>\}),
\par           <B> |-> sc_init (\{<Italy>, <Chile>, <Austria>, <Cameroon>\}),
\par           }{\lang1024\langfe1024\langnp1030 <C> |-> sc_init (\{<France>, <Denmark>, 
\par                             }{<SouthAfrica>,<SaudiArabia>\}),
\par           <D> |-> sc_init (\{ <Nigeria>, <Paraguay>, 
\par                              <Spain>, <Bulgaria>\}),
\par           <E> |-> sc_init (\{ <Holland>, <Mexico>, 
\par                              <Belgium>, <SouthKorea>\}),
\par           <F> |-> sc_init (\{<Germany>, <Yugoslavia>, 
\par                             <Iran>, <UnitedStates>\}),
\par           <G> |-> sc_init (\{<Rumania>, <England>, 
\par                             <Colombia>, <Tunisia>\}),
\par           <H> |-> sc_init (\{<Argentina>, <Croatia>, 
\par                             <Jamaica>, <Japan>\})\})
\par 
\par end
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {functions
\par 
\par sc_init : set of Team -> set of Score
\par sc_init (ts) ==
\par   \{ mk_Score (t,0,0,0,0) | t in set ts \};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- let expressions
\par let_example2 : Score * Score -> bool
\par let_example2 (sc1,sc2) ==
\par   let mk_Score (-,w1,-,-,p1) = sc1,
\par       mk_Score (-,w2,-,-,p2) = sc2
\par   in (p1 > p2) or
\par      (p1 = p2) and (w1 > w2);
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {win : Team * Team * set of Score -> set of Score
\par win (wt,lt,gp) ==
\par   let wsc = iota sc in set gp & sc.team = wt,
\par       lsc = iota sc in set gp & sc.team = lt
\par   in let new_wsc = mu(wsc, won |-> wsc.won + 1,
\par                            points |-> wsc.points + 3),
\par          new_lsc = mu(lsc, lost |-> lsc.lost + 1)
\par      in (gp \\ \{wsc,lsc\}) union \{new_wsc, new_lsc\}
\par pre forall sc1, sc2 in set gp & sc1<> sc2 <=> sc1.team <> sc2.team
\par     and \{wt,lt\} subset \{sc.team | sc in set gp\};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {build_score : Team * nat * nat * nat * nat -> Score
\par build_score (t,w,d,l,p) ==
\par   if 3 * w + d = p
\par   then mk_Score(t,w,d,l,p)
\par   else undefined;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {promoted : seq of Score -> Team * Team
\par promoted([sc1,sc2]^-) == mk_(sc1.team,sc2.team);
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {group_winner : Group -> Team
\par group_winner(g) ==
\par   cases g:
\par     mk_SeqGroup(l) -> (hd l).team,
\par     mk_SetGroup(s) -> let sc in set s be st
\par                         forall sc' in set s \\ \{sc\} 
\par                           & sc.points >= sc'.points
\par                       in sc.team,
\par     mk_MapGroup(m) -> let t in set dom m be st
\par                         }{\lang1024\langfe1024\langnp1030 let mk_(-,-,-,p) = m(t)
\par                         }{in forall mk_(-,-,-,p') in set rng m &
\par                              p >= p'
\par                       in t
\par   end;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {clear_winner : set of Score -> bool
\par clear_winner (scs) ==
\par   exists sc in set scs & 
\par     forall sc' in set scs \\ \{sc\} & sc.points > sc'.points;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {winner_by_more_wins : set of Score -> bool
\par winner_by_more_wins (scs) ==
\par   exists sc in set scs &
\par     forall sc' in set scs \\ \{sc\} &
\par       (sc.points > sc'.points) or
\par       (sc.points = sc'.points and sc.won > sc'.won)
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {operations
\par 
\par setup: () ==> ()
\par setup () ==
\par   gps := myGps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupA: () ==> ()
\par resultsGroupA () ==
\par   (Win(<Brazil>,<Scotland>);  Draw(<Norway>,<Morocco>);
\par    Win(<Brazil>,<Morocco>);   Draw(<Norway>,<Scotland>);
\par    Win(<Norway>,<Brazil>);    Win(<Morocco>,<Scotland>)
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupB: () ==> ()
\par resultsGroupB () ==
\par   (Draw(<Italy>,<Chile>); Draw (<Cameroon>,<Austria>);
\par    Draw(<Chile>,<Austria>); Win(<Italy>,<Cameroon>);
\par    Win(<Italy>,<Austria>); Draw(<Chile>,<Cameroon>)
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupC: () ==> ()
\par resultsGroupC () ==
\par   (Win(<Denmark>,<SaudiArabia>); Win(<France>,<SouthAfrica>);
\par    Draw(<SouthAfrica>,<Denmark>); Win(<France>,<SaudiArabia>);
\par    Win(<France>,<Denmark>); Draw(<SouthAfrica>,<SaudiArabia>);
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupD: () ==> ()
\par resultsGroupD () ==
\par   (Draw(<Paraguay>,<Bulgaria>); Win(<Nigeria>,<Spain>);
\par    Win(<Nigeria>,<Bulgaria>); Draw(<Spain>,<Paraguay>);
\par    Win(<Spain>,<Bulgaria>); Win(<Paraguay>,<Nigeria>);
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupE: () ==> ()
\par resultsGroupE () ==
\par   (Win(<Mexico>,<SouthKorea>); Draw(<Holland>,<Belgium>);
\par    Draw(<Belgium>,<Mexico>); Win(<Holland>,<SouthKorea>);
\par    Draw(<Holland>,<Mexico>); Draw(<Belgium>,<SouthKorea>)
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupF: () ==> ()
\par resultsGroupF () ==
\par   (Win(<Yugoslavia>,<Iran>); Win(<Germany>,<UnitedStates>);
\par    Draw(<Germany>,<Yugoslavia>); Win(<Iran>,<UnitedStates>);
\par    Win(<Germany>,<Iran>); Win(<Yugoslavia>,<UnitedStates>);
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupG: () ==> ()
\par resultsGroupG () ==
\par   (Win(<England>,<Tunisia>); Win(<Rumania>,<Colombia>);
\par    Win(<Colombia>,<Tunisia>); Win(<Rumania>,<England>);
\par    Draw(<Rumania>,<Tunisia>); Win(<England>,<Colombia>)
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {resultsGroupH: () ==> ()
\par resultsGroupH () ==
\par   (Win(<Argentina>,<Japan>); Win(<Croatia>,<Jamaica>);
\par    Win(<Croatia>,<Japan>); Win(<Argentina>,<Jamaica>);
\par    Win(<Argentina>,<Croatia>); Win(<Jamaica>,<Japan>);
\par   );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Win : Team * Team ==> ()
\par Win (wt,lt) ==
\par   let gp in set dom gps be st \{wt,lt\} subset \{sc.team  
\par                                              |sc in set gps(gp)\}
\par   in gps := gps ++ \{ gp |-> 
\par                          \{ if sc.team = wt
\par                            then mu(sc, won |-> sc.won + 1,
\par                                        points |-> sc.points + 3)
\par                            else if sc.team = lt
\par                            then mu(sc, lost |-> sc.lost + 1)
\par                            else sc 
\par                                    | sc in set gps(gp)\}\}
\par pre exists gp in set dom gps & \{wt,lt\} subset \{sc.team | sc in set gps(gp)\};
\par 
\par Win2 (wt,lt: Team)
\par ext wr gps : map GroupName to set of Score
\par pre exists gp in set dom gps & 
\par         \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par post exists gp in set dom gps &
\par        \{wt,lt\} subset \{sc.team | sc in set gps(gp)\}
\par        and gps = gps~ ++ 
\par                      \{ gp |-> 
\par                        \{if sc.team = wt
\par                         then mu(sc, won |-> sc.won + 1,
\par                                     points |-> sc.points + 3)
\par                         else if sc.team = lt
\par                         then mu(sc, lost |-> sc.lost + 1)
\par                         else sc 
\par                    | sc in set gps(gp)\}\};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {Draw : Team * Team ==> ()
\par Draw (t1,t2) ==
\par   let gp in set dom gps be st \{t1,t2\} subset \{sc.team 
\par                                              | sc in set gps(gp)\}
\par   in gps := gps ++ \{ gp |-> 
\par                          \{ if sc.team = t1
\par                            then mu(sc, drawn |-> sc.drawn + 1,
\par                                        points |-> sc.points + 1)
\par                            else if sc.team = t2
\par                            then mu(sc, drawn |-> sc.drawn + 1,
\par                                        points |-> sc.points + 1)
\par                            else sc 
\par                                    | sc in set gps(gp)\}\}
\par pre exists gp in set dom gps & \{t1,t2\} subset \{sc.team | sc in set gps(gp)\};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par 
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupWinner (gp:GroupName) t:Team
\par ext rd gps : map GroupName to set of Score
\par post t in set \{sc.team | sc in set gps(gp)\} and
\par      let sct = iota sc in set gps(gp) & sc.team = t 
\par      in 
\par        forall sc in set gps(gp) &
\par          sc.team <> t => sct.points > sc.points or
\par                          sct.points = sc.points and sct.won > sc.won;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupRunnerUp (gp:GroupName) t:Team
\par ext rd gps : map GroupName to set of Score
\par pre gp in set dom gps
\par post let sc' in set gps(gp) be st
\par        post_GroupWinner(gp,sc'.team,
\par                         mk_GroupPhase(gps),
\par                         mk_GroupPhase(gps))
\par      in t in set \{sc.team | sc in set gps(gp) \\ \{sc'\}\} and
\par         let sct = iota sc in set gps(gp) \\ \{sc'\} & sc.team = t
\par         in forall sc in set gps(gp) \\ \{sc'\} &
\par          sc.team <> t => sct.points > sc.points or
\par                          sct.points = sc.points and sct.won > sc.won;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {SecondRound () games : seq of (Team * Team)
\par ext rd gps : map GroupName to set of Score
\par post let winners = \{ gp |-> t | t : Team, gp in set dom gps & 
\par                                  post_GroupWinner(gp,t,
\par                                                   mk_GroupPhase(gps),
\par                                                   mk_GroupPhase(gps))\},
\par          runners_up = \{ gp |-> t | t : Team,  
\par                                    }{\lang1024\langfe1024\langnp1030 gp in set dom gps 
\par                       }{& post_GroupRunnerUp(gp,t,
\par                                            mk_GroupPhase(gps),
\par                                            mk_GroupPhase(gps))\}
\par       in games = [mk_(winners(secondRoundWinners(i)),
\par                       runners_up(secondRoundWinners(i))) 
\par                  | i in set \{1,...,8\}];
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- statements
\par 
\par 
\par -- let stmt - lots of examples presumably
\par GroupWinner_expl : GroupName ==> Team
\par GroupWinner_expl (gp) ==
\par   let sc in set gps(gp) be st
\par      forall sc' in set gps(gp) \\ \{sc\} & 
\par         (sc.points > sc'.points) or
\par         (sc.points = sc'.points and sc.won > sc'.won)
\par   in return sc.team
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupRunnerUp_expl : GroupName ==> Team
\par GroupRunnerUp_expl (gp) ==
\par   def t = GroupWinner(gp)
\par   in let sct = iota sc in set gps(gp) & sc.team = t
\par      in 
\par        let sc in set gps(gp) \\ \{sct\} be st
\par          forall sc' in set gps(gp) \\ \{sc,sct\} & 
\par            (sc.points > sc'.points) or
\par            (sc.points = sc'.points and sc.won > sc'.won)
\par        in return sc.team
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- def stmt
\par SecondRound_expl : () ==> seq of (Team * Team)
\par SecondRound_expl () ==
\par   def winners = \{ gp |-> GroupWinner_expl(gp) | gp in set dom gps \};
\par       runners_up = \{ gp |-> GroupRunnerUp_expl(gp) | gp in set dom gps\}
\par   in return ([mk_(winners(secondRoundWinners(i)),
\par                   runners_up(secondRoundRunnersUp(i))) | i in set \{1,...,8\}]);
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- assignment to state designator
\par --  c.f. earlier version of Win
\par Win_sd : Team * Team ==> ()
\par Win_sd (wt,lt) ==
\par   let gp in set dom gps be st \{wt,lt\} subset \{sc.team 
\par                                              | sc in set gps(gp)\}
\par   in gps(gp) := \{ if sc.team = wt
\par                   then mu(sc, won |-> sc.won + 1,
\par                               points |-> sc.points + 3)
\par                   else if sc.team = lt
\par                   then mu(sc, lost |-> sc.lost + 1)
\par                   else sc 
\par                       | sc in set gps(gp)\}
\par pre exists gp in set dom gps & 
\par     \{wt,lt\} subset \{sc.team | sc in set gps(gp)\};
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- conditional statements
\par GroupWinner_if : GroupName ==> Team
\par GroupWinner_if (gp) ==
\par   if clear_winner(gps(gp))
\par   then return ((iota sc in set gps(gp) &
\par                  forall sc' in set gps(gp) \\ \{sc\} &
\par                    sc.points > sc'.points).team)
\par   else if winner_by_more_wins(gps(gp))
\par        then return ((iota sc in set gps(gp) &
\par                  forall sc' in set gps(gp) \\ \{sc\} &
\par                    (sc.points > sc'.points) or
\par                    (sc.points = sc'.points and sc.won > sc'.won)).team)
\par   else RandomElement ( \{sc.team | sc in set gps(gp) &
\par                          forall sc' in set gps(gp) &
\par                           sc'.points <= sc.points\} )
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {RandomElement : set of Team ==> Team
\par RandomElement (ts) ==
\par   (dcl t:Team := let t' in set ts in t';
\par    return (t));
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {GroupWinner_cases : GroupName ==> Team
\par GroupWinner_cases (gp) ==
\par   cases true:
\par     (clear_winner(gps(gp))) -> 
\par          return ((iota sc in set gps(gp) &
\par                    forall sc' in set gps(gp) \\ \{sc\} &
\par                     sc.points > sc'.points).team),
\par 
\par     (winner_by_more_wins(gps(gp))) ->
\par          return ((iota sc in set gps(gp) &
\par                    forall sc' in set gps(gp) \\ \{sc\} &
\par                      (sc.points > sc'.points) or
\par                      (sc.points = sc'.points and 
\par                       sc.won > sc'.won)).team),
\par 
\par     others -> RandomElement ( \{sc.team | sc in set gps(gp) &
\par                                 forall sc' in set gps(gp) &
\par                                  sc'.points <= sc.points\} )
\par   end
\par pre gp in set dom gps;
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }\pard\plain \s15\ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \shading2000 \f2\fs20\lang1024\langfe1024\cgrid\noproof\langnp1033\langfenp1033 {-- for loops
\par GroupWinners: () ==> set of Team
\par GroupWinners () ==
\par   (dcl winners : set of Team := \{\};
\par    for all gp in set dom gps do
\par      (dcl winner: Team := GroupWinner(gp);
\par       winners := winners union \{winner\}
\par      );
\par    return winners
\par    );
\par }\pard\plain \ql \li0\ri0\widctlpar\faauto\adjustright\rin0\lin0\itap0 \fs20\lang1033\langfe1033\cgrid\langnp1033\langfenp1033 {
\par }{\lang1030\langfe1033\langnp1030 
\par }}
