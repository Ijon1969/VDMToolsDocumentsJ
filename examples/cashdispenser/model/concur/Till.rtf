{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f17\froman\fcharset238\fprq2 Times New Roman CE;}{\f18\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f20\froman\fcharset161\fprq2 Times New Roman Greek;}{\f21\froman\fcharset162\fprq2 Times New Roman Tur;}{\f22\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f23\fswiss\fcharset238\fprq2 Arial CE;}{\f24\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f26\fswiss\fcharset161\fprq2 Arial Greek;}{\f27\fswiss\fcharset162\fprq2 Arial Tur;}{\f28\fswiss\fcharset186\fprq2 Arial Baltic;}{\f29\fmodern\fcharset238\fprq1 Courier New CE;}{\f30\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f32\fmodern\fcharset161\fprq1 Courier New Greek;}{\f33\fmodern\fcharset162\fprq1 Courier New Tur;}{\f34\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid \snext15 VDM;}{\*\cs16 \additive \f6 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf16 \sbasedon10 VDM_NCOV;}{\s18\nowidctlpar\widctlpar\adjustright 
\f2\fs20\lang1024\cgrid \sbasedon15 \snext18 VDM_TC_TABLE;}{\s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid \sbasedon0 \snext19 Body Text;}}{\info{\title Default Rose-VDM++ Link forward engineering file}{\author VDM Tools}
{\operator Paul Mukherjee}{\creatim\yr1998\mo10\dy16\hr14\min8}{\revtim\yr1999\mo12\dy8\hr14\min32}{\printim\yr1999\mo9\dy15\hr11\min36}{\version158}{\edmins247}{\nofpages2}{\nofwords484}{\nofchars2761}{\*\company CSK}{\nofcharsws0}{\vern71}}
\widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {\lang2057 The Class Till
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The Till class is virtually identical to the one presented in Appendix B except that some of the operations have been modified to be able to deliver the value }{\f2 <Fail>}{
 to represent failed communication with the CentralResource. Also, the resource instance va
riable is now a reference to a LocalResource, though since LocalResource and CentralResource have an identical calling interface, this change is minimal. The remaining changes are self-explanatory, so in the sequel we merely present the class, with any ch
anges from the previous version indicated by underlining.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {class Till
\par 
\par instance variables
\par   curCard : [Card] := nil;
\par   cardOk : bool := false;
\par   retainedCards : set of Card := \{\};
\par   resource : }{\ul LocalResource;}{
\par 
\par   inv curCard = nil => not cardOk;
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {operations
\par   public Create: }{\ul LocalResource}{ ==> Till
\par   Create(res) == 
\par     (resource := res;
\par      return self);
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{InsertCard : Card ==> ()
\par   InsertCard(c) ==
\par     curCard := c
\par   pre not CardInside();
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{Validate : Card`PinCode ==> <PinOk> | <PinNotOk> | <Retained> 
\par                               }{\ul | <Fail>  
\par }{  Validate(pin) ==
\par     let cardId = curCard.GetCardId(),
\par         codeOk = curCard.GetCode() = Encode(pin),
\par         cardLegal = IsLegalCard()
\par     in}{\ul  if cardLegal = <Fail>
\par        then return <Fail>
\par        else}{
\par           (cardOk := codeOk and cardLegal;
\par            if not cardLegal 
\par            then (retainedCards := retainedCards union \{curCard\};
\par                  curCard := nil;
\par                  return <Retained>)
\par            elseif codeOk 
\par            }{\ul then if resource.ResetNumberOfTries(cardId) = <Fail>
\par }{                }{\ul then return <Fail> 
\par }{                }{\ul else return <PinOk>
\par   }{         }{\ul else
\par              (let incTries = resource.IncrNumberOfTries(cardId),
\par                   numTriesExceeded = 
\par }{                             resource.NumberOfTriesExceeded(cardId) }{\ul in
\par               if <Fail> in set \{incTries, numTriesExceeded\}
\par               then return <Fail>
\par               elseif numTriesExceeded }{then
\par                 (retainedCards := retainedCards union \{curCard\};
\par                  cardOk := false;
\par                  curCard := nil;
\par              }{\ul     return <Retained>)
\par               else return <PinNotOk>
\par              )
\par           )}{
\par   pre CardInside() and not cardOk;
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{ReturnCard : () ==> ()
\par   ReturnCard() ==
\par     (cardOk := false;
\par      curCard:= nil)
\par   pre CardInside();
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{GetBalance : () ==> [nat]}{\ul |<Fail>}{
\par   GetBalance() ==
\par     resource.GetBalance(curCard.GetAccountId())
\par   pre CardValidated();
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{MakeWithdrawal : nat ==> bool}{\ul  | <Fail>}{
\par   MakeWithdrawal(amount) ==
\par     resource.Withdrawal
\par       (curCard.GetAccountId(),curCard.GetCardId(),amount)
\par   pre CardValidated();
\par 
\par   }{public }{RequestStatement : () ==> bool}{\ul  | <Fail>}{
\par   RequestStatement() ==
\par     resource.PostStatement(curCard.GetAccountId(),curCard.GetCardId())
\par   pre CardValidated();
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par The IsLegalCard operation below is only used internally to validate a card.
\par 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{IsLegalCard : () ==> bool}{\ul  | <Fail>}{
\par   IsLegalCard() ==
\par     return 
\par       resource.IsLegalCard(curCard.GetAccountId(),curCard.GetCardId())
\par   pre CardInside();
\par 
\par   }{public }{CardValidated: () ==> bool
\par   CardValidated() ==
\par     return curCard <> nil and cardOk;
\par 
\par   }{public }{CardInside: () ==> bool
\par   CardInside() ==
\par    return curCard <> nil;
\par 
\par functions
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  Encode: Card`PinCode +> Card`Code
\par   Encode(pin) ==
\par     pin; -- NB! The actual encoding procedure has not yet been chosen
\par 
\par end Till
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par 
\par }}
