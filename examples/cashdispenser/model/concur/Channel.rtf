{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f17\froman\fcharset238\fprq2 Times New Roman CE;}{\f18\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f20\froman\fcharset161\fprq2 Times New Roman Greek;}{\f21\froman\fcharset162\fprq2 Times New Roman Tur;}{\f22\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f23\fswiss\fcharset238\fprq2 Arial CE;}{\f24\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f26\fswiss\fcharset161\fprq2 Arial Greek;}{\f27\fswiss\fcharset162\fprq2 Arial Tur;}{\f28\fswiss\fcharset186\fprq2 Arial Baltic;}{\f29\fmodern\fcharset238\fprq1 Courier New CE;}{\f30\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f32\fmodern\fcharset161\fprq1 Courier New Greek;}{\f33\fmodern\fcharset162\fprq1 Courier New Tur;}{\f34\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\sb240\sa60\keepn\nowidctlpar\widctlpar\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid \snext15 VDM;}{\*\cs16 \additive \f6 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf16 \sbasedon10 VDM_NCOV;}{\s18\nowidctlpar\widctlpar\adjustright 
\f2\fs20\lang1024\cgrid \sbasedon15 \snext18 VDM_TC_TABLE;}{\s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid \sbasedon0 \snext19 Body Text;}}{\info{\title Default Rose-VDM++ Link forward engineering file}{\author VDM Tools}
{\operator Paul Mukherjee}{\creatim\yr1999\mo9\dy6\hr16\min48}{\revtim\yr1999\mo12\dy8\hr14\min23}{\printim\yr1999\mo9\dy7\hr9\min37}{\version34}{\edmins115}{\nofpages4}{\nofwords837}{\nofchars4776}{\*\company CSK}{\nofcharsws0}{\vern71}}
\widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade\viewkind1\viewscale90\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {\lang2057 The Channel Class
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par }{\lang1024 {\shpgrp{\*\shpinst\shpleft174\shptop788\shpright8351\shpbottom1994\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz4\shplid1026{\sp{\sn groupLeft}{\sv 1974}}{\sp{\sn groupTop}{\sv 3223}}{\sp{\sn groupRight}{\sv 10151}}
{\sp{\sn groupBottom}{\sv 4429}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}{\shp{\*\shpinst\shplid1027{\sp{\sn relLeft}{\sv 4790}}{\sp{\sn relTop}{\sv 3223}}{\sp{\sn relRight}{\sv 7318}}
{\sp{\sn relBottom}{\sv 4429}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}}}{\shp{\*\shpinst\shplid1028{\sp{\sn relLeft}{\sv 3233}}{\sp{\sn relTop}{\sv 3527}}
{\sp{\sn relRight}{\sv 4790}}{\sp{\sn relBottom}{\sv 3527}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}}}{\shp{\*\shpinst\shplid1029{\sp{\sn relLeft}{\sv 7311}}{\sp{\sn relTop}{\sv 3532}}{\sp{\sn relRight}{\sv 8868}}{\sp{\sn relBottom}{\sv 3532}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineEndArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}}}
{\shp{\*\shpinst\shplid1030{\sp{\sn relLeft}{\sv 3235}}{\sp{\sn relTop}{\sv 4158}}{\sp{\sn relRight}{\sv 4792}}{\sp{\sn relBottom}{\sv 4158}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}
{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineStartArrowhead}{\sv 1}}{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}}}{\shp{\*\shpinst\shplid1031{\sp{\sn relLeft}{\sv 7313}}{\sp{\sn relTop}{\sv 4163}}
{\sp{\sn relRight}{\sv 8870}}{\sp{\sn relBottom}{\sv 4163}}{\sp{\sn fRelFlipH}{\sv 0}}{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 20}}{\sp{\sn shapePath}{\sv 4}}{\sp{\sn fFillOK}{\sv 0}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn lineStartArrowhead}{\sv 1}}
{\sp{\sn fArrowheadsOK}{\sv 1}}{\sp{\sn lidRegroup}{\sv 1}}}}{\shp{\*\shpinst\shplid1032{\sp{\sn relLeft}{\sv 5093}}{\sp{\sn relTop}{\sv 3611}}{\sp{\sn relRight}{\sv 6985}}{\sp{\sn relBottom}{\sv 4113}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 65536}}{\sp{\sn hspNext}{\sv 1032}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\shptxt \pard\plain \qc\nowidctlpar\widctlpar\adjustright 
\fs20\cgrid {\lang1030 Channel
\par }}}}{\shp{\*\shpinst\shplid1033{\sp{\sn relLeft}{\sv 1974}}{\sp{\sn relTop}{\sv 3384}}{\sp{\sn relRight}{\sv 3196}}{\sp{\sn relBottom}{\sv 4254}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 131072}}{\sp{\sn hspNext}{\sv 1033}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\lang1030 Client
\par (Local
\par Resource)
\par }}}}{\shp{\*\shpinst\shplid1034{\sp{\sn relLeft}{\sv 8929}}{\sp{\sn relTop}{\sv 3389}}{\sp{\sn relRight}{\sv 10151}}{\sp{\sn relBottom}{\sv 4259}}{\sp{\sn fRelFlipH}{\sv 0}}
{\sp{\sn fRelFlipV}{\sv 0}}{\sp{\sn shapeType}{\sv 202}}{\sp{\sn lTxid}{\sv 196608}}{\sp{\sn hspNext}{\sv 1034}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\lang1030 Server
\par (Local
\par Till)
\par }}}}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8196\dppolygon\dppolycount4\dpptx0\dppty0\dpptx8177\dppty0\dpptx8177\dppty1206\dpptx0\dppty1206\dpx174\dpy788\dpxsize8177\dpysize1206
\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat1\dplinew15\dplinecor0\dplinecog0\dplinecob0}}}
{\shp{\*\shpinst\shpleft5541\shptop1716\shpright7232\shpbottom2168\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz3\shplid1035{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lTxid}{\sv 262144}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 SendResponse
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8195\dptxbx{\dptxbxtext\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 SendResponse
\par }}\dpx5541\dpy1716\dpxsize1691\dpysize452\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow}}}
{\shp{\*\shpinst\shpleft5523\shptop712\shpright7214\shpbottom1164\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz2\shplid1036{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lTxid}{\sv 327680}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 ReceiveRequest
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8194\dptxbx{\dptxbxtext\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 ReceiveRequest
\par }}\dpx5523\dpy712\dpxsize1691\dpysize452\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow}}}
{\shp{\*\shpinst\shpleft1299\shptop1751\shpright3040\shpbottom2203\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz1\shplid1037{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lTxid}{\sv 393216}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 ReceiveResponse
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8193\dptxbx{\dptxbxtext\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 ReceiveResponse
\par }}\dpx1299\dpy1751\dpxsize1741\dpysize452\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow}}}
{\shp{\*\shpinst\shpleft1473\shptop707\shpright2863\shpbottom1159\shpfhdr0\shpbxcolumn\shpbypara\shpwr1\shpwrk0\shpfblwtxt0\shpz0\shplid1038{\sp{\sn shapeType}{\sv 202}}{\sp{\sn fFlipH}{\sv 0}}{\sp{\sn fFlipV}{\sv 0}}
{\sp{\sn lTxid}{\sv 458752}}{\sp{\sn fFilled}{\sv 0}}{\sp{\sn fLine}{\sv 0}}{\sp{\sn lidRegroup}{\sv 1}}{\shptxt \pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 SendRequest
\par }}}{\shprslt{\*\do\dobxcolumn\dobypara\dodhgt8192\dptxbx{\dptxbxtext\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {\i\lang1030 SendRequest
\par }}\dpx1473\dpy707\dpxsize1390\dpysize452\dpfillfgcr255\dpfillfgcg255\dpfillfgcb255\dpfillbgcr255\dpfillbgcg255\dpfillbgcb255\dpfillpat0\dplinehollow}}}}{
The Channel class models communication between a client (a Local Resource) and a server (a Local Till). It is a one place buffer which receives requests from the client, which the server receives and processes. The server generates a response to a given r
e
quest which is sent to the channel, and this response is then collected by the client. The communication channel is considered to have failed if within some predefined timeout interval starting from the moment a request was received, and response has not 
been received by the channel.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par class Channel
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The channel has four instance variables: one each for storing incoming request and responses, a reference to a Timer object for timing out communication, and the a counter (}{\f2 
curTime}{) which whenever a response is expected from the server, counts the time since the request was received from the client.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par instance variables
\par   req : [Request] := nil;
\par   resp :[Response] := nil;
\par   timer : Timer := new Timer();
\par   curTime : nat;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The constant value }{\f2 timeout}{ is an arbitrary constant used to model the amount of time we are prepared to wait before we conclude that the communication channel has failed.

\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {values
\par   timeout = 1500;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par A number of types are defined which are used to represent the values that are communicated through the channel.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {types
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A request from a client consists of a command to the server, and any arguments relating to that command.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public Request :: command : Command
\par                     data : set of ReqData;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A command is a quote value, corresponding to the possible methods that may be called in the CentralResource.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   public Command = <TriesExceeded> | <ResetTries> | <IncTries> | 
\par                    <GetBalance> | <Withdrawal> | <PostStmt> | 
\par                <IsLegalCard>;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {An element of type }{\f2 ReqData}{ represents a possible argument to a method in CentralResource.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   public ReqData = CardId | AccountId | Amount;
\par   public CardId :: val : Card`CardId;
\par   public AccountId :: val : Account`AccountId;
\par   public Amount :: val : nat;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A response consists of the command which is being responded to,  and the value computed by the corresponding method in CentralResource.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   public Response :: command : Command
\par               data : RespData;
\par   public RespData = [nat] | bool;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The operations available in this class represent the access operations on the buffer, together with a couple of auxilliary operations.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  
\par operations
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A client sends puts a request into the channel using SendRequest. This takes a request and stores it in the appropriate instance varia
ble,  then resets the timer so that a timeout can be generated if necessary. As this is a one place buffer, we can only accept a request if there is not already one in the buffer (specified in the pre-condition).
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public SendRequest : Request ==> ()
\par   SendRequest(r) ==
\par     (req := r;
\par      timer.Start())
\par   pre req = nil;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The server removes requests from the buffer using ReceiveRequest. This takes the request from the buffer and resets the corresponding instance variable to be nil.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public ReceiveRequest : () ==> Request
\par   ReceiveRequest() ==
\par     let r = req in
\par     (req := nil;
\par      return r);
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The server sends a response to the buffer using SendResponse. The resp instance variable is set to the value of the gi
ven response, and the timer is stopped as the response has been received. Again, the pre-condition specifies that a response can only be accepted if there is not already one waiting to be received by the client.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public SendResponse : Response ==> ()
\par   SendResponse(r) ==
\par     (resp := r;
\par      timer.Stop())
\par   pre resp = nil;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The client receives a response using ReceiveResponse. This delivers a response (if one has been received), or the nil value (representing a timeout). 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public ReceiveResponse : () ==> [Response]
\par   ReceiveResponse() ==
\par     let r = resp in
\par     (resp := nil;
\par      return r);
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The Wait operation is used for synchronization. Its meaning will become clear when the synchronization constraints are described below.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  public Wait: () ==> ()
\par   Wait() == 
\par     skip;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The operation CheckTime is executed periodically by the channel's thread, and is used to update the curTime instance variable.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   CheckTime: () ==> ()
\par   CheckTime() ==
\par     curTime := timer.GetTime()
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A function is defined which is used to simplify expressions
 in the synchronization constraints.The predicate AllReceived takes the number of activations and completions of a send operation and the number of activations and completions of a receive operation, and returns true if and only if all of the send operati
ons have completed, all of the receive operations have completed, and there corresponds a send operation for each receive operation.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par functions
\par 
\par   AllReceived : nat * nat * nat * nat -> bool
\par   AllReceived(act_send, fin_send, act_rec, fin_rec) ==
\par     act_send = fin_send and
\par     act_rec = fin_rec and
\par     (act_send + fin_send) = (act_send + fin_send);
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {Since a Channel object will be shared by both the client and the server, we specify synchronization constraints to ensure that the integrity of the object is preserved.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {sync
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
A SendRequest can only be accepted if all previous SendRequests have been received, all previous SendResponses have been received, and the number of requests equals the number of responses. This ensures that no requests are accepte
d while a response to a previous request is being processed.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  per SendRequest => 
\par         AllReceived(#act(SendRequest), #fin(SendRequest),
\par                     #act(ReceiveRequest), #fin(ReceiveRequest)) and
\par         AllReceived(#act(SendResponse), #fin(SendResponse),
\par                     #act(ReceiveResponse), #fin(ReceiveResponse)) and
\par         #act(SendRequest) = #fin(ReceiveResponse);
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The synchronization constraint on SendResponse is similar to SendRequest except that the number of SendRequests previousl
y received must be exactly one more than the number of SendResponses previously received.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   per SendResponse => 
\par         AllReceived(#act(SendRequest), #fin(SendRequest),
\par                     #act(ReceiveRequest), #fin(ReceiveRequest)) and
\par         AllReceived(#act(SendResponse), #fin(SendResponse),
\par                     #act(ReceiveResponse), #fin(ReceiveResponse)) and
\par         #act(SendRequest) - #fin(SendResponse) = 1;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A request can only be received by the server if one has been placed in the channel by the client. Until then a call to ReceiveRequest will block.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  per ReceiveRequest => req <> nil;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
The operation Wait is used by a client to check whether a response has been received for a request. Thus it will be called by a client after sending a request. This call will block until either a response has been received, or the current time exceeds the
 timeout value.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  per Wait => curTime > timeout or resp <> nil;
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The only remaining part of the Channel class is its thread. This periodically calls CheckTime to update the time counter. 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par thread
\par   periodic(1000)(CheckTime)
\par 
\par end Channel
\par }}
