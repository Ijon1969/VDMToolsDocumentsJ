{\rtf1\ansi\ansicpg1252\uc1 \deff0\deflang1033\deflangfe1033{\fonttbl{\f0\froman\fcharset0\fprq2{\*\panose 02020603050405020304}Times New Roman;}{\f1\fswiss\fcharset0\fprq2{\*\panose 020b0604020202020204}Arial;}
{\f2\fmodern\fcharset0\fprq1{\*\panose 02070309020205020404}Courier New;}{\f6\fmodern\fcharset0\fprq1{\*\panose 00000000000000000000}Courier;}{\f17\froman\fcharset238\fprq2 Times New Roman CE;}{\f18\froman\fcharset204\fprq2 Times New Roman Cyr;}
{\f20\froman\fcharset161\fprq2 Times New Roman Greek;}{\f21\froman\fcharset162\fprq2 Times New Roman Tur;}{\f22\froman\fcharset186\fprq2 Times New Roman Baltic;}{\f23\fswiss\fcharset238\fprq2 Arial CE;}{\f24\fswiss\fcharset204\fprq2 Arial Cyr;}
{\f26\fswiss\fcharset161\fprq2 Arial Greek;}{\f27\fswiss\fcharset162\fprq2 Arial Tur;}{\f28\fswiss\fcharset186\fprq2 Arial Baltic;}{\f29\fmodern\fcharset238\fprq1 Courier New CE;}{\f30\fmodern\fcharset204\fprq1 Courier New Cyr;}
{\f32\fmodern\fcharset161\fprq1 Courier New Greek;}{\f33\fmodern\fcharset162\fprq1 Courier New Tur;}{\f34\fmodern\fcharset186\fprq1 Courier New Baltic;}}{\colortbl;\red0\green0\blue0;\red0\green0\blue255;\red0\green255\blue255;\red0\green255\blue0;
\red255\green0\blue255;\red255\green0\blue0;\red255\green255\blue0;\red255\green255\blue255;\red0\green0\blue128;\red0\green128\blue128;\red0\green128\blue0;\red128\green0\blue128;\red128\green0\blue0;\red128\green128\blue0;\red128\green128\blue128;
\red192\green192\blue192;}{\stylesheet{\nowidctlpar\widctlpar\adjustright \fs20\cgrid \snext0 Normal;}{\s1\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid \sbasedon0 \snext0 heading 1;}{\*\cs10 \additive 
Default Paragraph Font;}{\s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid \snext15 VDM;}{\*\cs16 \additive \f6 \sbasedon10 VDM_COV;}{\*\cs17 \additive \f6\cf16 \sbasedon10 VDM_NCOV;}{\s18\nowidctlpar\widctlpar\adjustright 
\f2\fs20\lang1024\cgrid \sbasedon15 \snext18 VDM_TC_TABLE;}{\s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid \sbasedon0 \snext19 Body Text;}}{\info{\title Default Rose-VDM++ Link forward engineering file}{\author VDM Tools}
{\operator Paul Mukherjee}{\creatim\yr1999\mo9\dy7\hr7\min46}{\revtim\yr1999\mo12\dy8\hr14\min28}{\printim\yr1999\mo9\dy7\hr10\min24}{\version23}{\edmins69}{\nofpages2}{\nofwords226}{\nofchars1289}{\*\company CSK}{\nofcharsws0}{\vern71}}
\widowctrl\ftnbj\aenddoc\linkstyles\hyphcaps0\formshade\viewkind4\viewscale100\pgbrdrhead\pgbrdrfoot \fet0\sectd \linex0\headery709\footery709\colsx709\endnhere\sectdefaultcl {\*\pnseclvl1\pnucrm\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl2
\pnucltr\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl3\pndec\pnstart1\pnindent720\pnhang{\pntxta .}}{\*\pnseclvl4\pnlcltr\pnstart1\pnindent720\pnhang{\pntxta )}}{\*\pnseclvl5\pndec\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl6
\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl7\pnlcrm\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl8\pnlcltr\pnstart1\pnindent720\pnhang{\pntxtb (}{\pntxta )}}{\*\pnseclvl9\pnlcrm\pnstart1\pnindent720\pnhang
{\pntxtb (}{\pntxta )}}\pard\plain \s1\sb240\sa60\keepn\nowidctlpar\widctlpar\outlinelevel0\adjustright \b\f1\fs28\kerning28\cgrid {\lang2057 The Class LocalResource
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A LocalResource acts as a virtually seamless interface for a Till to a Channel. Thus it provides the same call
ing interface as a CentralResource, except that its operations are able to return the value }{\f2 <Fail> }{to represent a communication failure.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par class LocalResource
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {A LocalResource has only one instance variable: a reference to a Channel.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par instance variables
\par   c : Channel;
\par 
\par operations
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The Create operation is used to initialize the Channel.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{Create : Channel ==> ()
\par   Create(nc) ==
\par     c := nc;
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {
\par The operation GetBalance shadows the corresponding operation in CentralResource. The argument received by the method is
 converted into a value of type Channel`ReqData, and then a request is constructed. This is sent to the channel and then the Wait operation is called.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{GetBalance : Account`AccountId ==> [nat]| <Fail>
\par   GetBalance(accountId) ==
\par     let req = mk_Channel`Request(<GetBalance>,
\par                                  \{mk_Channel`AccountId(accountId)\}) in
\par     (c.SendRequest(req);
\par      Wait(<GetBalance>));
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The Wait operation waits for a particular response from the channel. If the response is nil or does not match the
 expected result, a failure is signalled (corresponding to a timeout in the Channel). Otherwise the data value in the response is returned.
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {
\par   Wait : Channel`Command ==> Channel`RespData | <Fail>
\par   Wait(comm) ==
\par     (c.Wait();
\par      let resp = c.ReceiveResponse() in
\par      if resp = nil
\par      then return <Fail>
\par      elseif resp.command <> comm
\par      then return <Fail>
\par      else return resp.data);
\par 
\par }\pard\plain \s19\qj\sa120\nowidctlpar\widctlpar\adjustright \fs22\cgrid {The remaining operations follow the same basic approach as that of GetBalance, and need no further explanation.
\par 
\par }\pard\plain \s15\nowidctlpar\widctlpar\adjustright \f2\fs20\lang1024\cgrid {  }{public }{Withdrawal : Account`AccountId * Card`CardId * nat ==> bool | <Fail>
\par   Withdrawal(accountId,cardId,amount) ==
\par     let req = mk_Channel`Request(<Withdrawal>,
\par                                  \{mk_Channel`AccountId(accountId),
\par                                   mk_Channel`CardId(cardId),
\par                                   mk_Channel`Amount(amount)\}) in
\par     (c.SendRequest(req);
\par      Wait(<Withdrawal>));
\par 
\par   }{public }{PostStatement : Account`AccountId * Card`CardId ==> bool | <Fail>
\par   PostStatement(accountId,cardId) ==
\par     let req = mk_Channel`Request(<PostStmt>,
\par                                  \{mk_Channel`AccountId(accountId),
\par                                   mk_Channel`CardId(cardId)\}) in
\par     (c.SendRequest(req);
\par      Wait(<PostStmt>));
\par 
\par   }{public }{IsLegalCard : Account`AccountId * Card`CardId ==> bool | <Fail>
\par   IsLegalCard(accountId,cardId) ==
\par     let req = mk_Channel`Request(<IsLegalCard>,
\par                                  \{mk_Channel`AccountId(accountId),
\par                                   mk_Channel`CardId(cardId)\}) in    
\par     (c.SendRequest(req);
\par      Wait(<IsLegalCard>));
\par 
\par 
\par   }{public }{NumberOfTriesExceeded : Card`CardId ==> bool | <Fail>
\par   NumberOfTriesExceeded(cardId) == 
\par     let req = mk_Channel`Request(<TriesExceeded>,
\par                                  \{mk_Channel`CardId(cardId)\}) in
\par     (c.SendRequest(req);
\par      Wait(<TriesExceeded>));
\par 
\par   }{public }{ResetNumberOfTries : Card`CardId ==> [<Fail>]
\par   ResetNumberOfTries(cardId) ==
\par     let req = mk_Channel`Request(<ResetTries>,
\par                                  \{mk_Channel`CardId(cardId)\}) in
\par     (c.SendRequest(req);
\par      Wait(<ResetTries>));
\par 
\par   }{public }{IncrNumberOfTries : Card`CardId ==> [<Fail>]
\par   IncrNumberOfTries(cardId) ==
\par     let req = mk_Channel`Request(<IncTries>,
\par                                  \{mk_Channel`CardId(cardId)\}) in
\par     (c.SendRequest(req);
\par      Wait(<IncTries>));
\par 
\par 
\par 
\par end LocalResource
\par }\pard\plain \nowidctlpar\widctlpar\adjustright \fs20\cgrid {
\par }}
